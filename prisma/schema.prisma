// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String         @id @default(cuid())
  price       Decimal
  inventory   Int
  title       String
  description String
  image       String
  salesPrice  Decimal?
  isArchived  Boolean        @default(false)
  categories  Category[]
  orders      ProductOrder[]
}

model Order {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  zip       String
  orderDate DateTime
  isShipped Boolean  @default(false)
  total     Decimal

  products ProductOrder[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  userName      String?
  email         String    @unique //ska vara email i validering
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
}

model Category {
  id    String @id @default(cuid())
  title String @unique

  products Product[]
}

model ProductOrder {
  productId String
  orderId   String
  quantity  Int
  subTotal  Decimal

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@id([productId, orderId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
